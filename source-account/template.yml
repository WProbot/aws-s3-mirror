---
AWSTemplateFormatVersion: '2010-09-09'

Description: Mirror S3 objects from one bucket to another

Metadata:
  Author: Michael Ludvig <michael.ludvig@enterpriseit.co.nz>
  Description: |-
    Continuously mirror objects from S3 bucket to another account.

Parameters:
  TargetBucket:
    Type: String
    Description: Target S3 bucket. Must be writeable by our Lambda function.

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: "s3:ObjectCreated:*"
          Function: !GetAtt CopierLambda.Arn

  CopierLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      #- arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
      - PolicyName: WriteToTarget
        PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject*
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${TargetBucket}/*"

  CopierLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_main.lambda_handler
      MemorySize: 128
      Role: !GetAtt CopierLambdaRole.Arn
      Runtime: python3.6
      Timeout: 10
      Code: lambda_main.py
      Environment:
        Variables:
          TARGET_BUCKET: !Ref TargetBucket

  CopierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CopierLambda}"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt Bucket.Arn
      FunctionName: !GetAtt CopierLambda.Arn

Outputs:
  Bucket:
    Value: !Ref Bucket
